// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"encoding/json"

	"github.com/ethereum-optimism/optimism/op-bindings/solc"
)

const RevenueSharerStorageLayoutJSON = "{\"storage\":[{\"astId\":1000,\"contract\":\"src/L2/RevenueSharer.sol:RevenueSharer\",\"label\":\"lastDisbursementTime\",\"offset\":0,\"slot\":\"0\",\"type\":\"t_uint256\"},{\"astId\":1001,\"contract\":\"src/L2/RevenueSharer.sol:RevenueSharer\",\"label\":\"netFeeRevenue\",\"offset\":0,\"slot\":\"1\",\"type\":\"t_uint256\"}],\"types\":{\"t_uint256\":{\"encoding\":\"inplace\",\"label\":\"uint256\",\"numberOfBytes\":\"32\"}}}"

var RevenueSharerStorageLayout = new(solc.StorageLayout)

var RevenueSharerDeployedBin = "0x6080604052600436106100b55760003560e01c806354664de51161006957806393819a3f1161004e57806393819a3f14610335578063ad41d09c1461034b578063b87ea8d41461036157600080fd5b806354664de5146102d65780635b201d831461030a57600080fd5b806336f1a6e51161009a57806336f1a6e514610276578063394d2731146102aa578063447eb5ac146102c057600080fd5b80630c8cd070146101f5578063235d506d1461025357600080fd5b366101f0573373420000000000000000000000000000000000001114806100ef575033734200000000000000000000000000000000000019145b156101115734600160008282546101069190610a5a565b909155506101b99050565b3373420000000000000000000000000000000000001a146101b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f4665654469736275727365723a204f6e6c79204665655661756c74732063616e60448201527f2073656e642045544820746f204665654469736275727365720000000000000060648201526084015b60405180910390fd5b60405134815233907f2ccfc58c2cef4ee590b5f16be0548cc54afc12e1c66a67b362b7d640fd16bb2d9060200160405180910390a2005b600080fd5b34801561020157600080fd5b506102297f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561025f57600080fd5b5061026860fa81565b60405190815260200161024a565b34801561028257600080fd5b506102297f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b657600080fd5b5061026860005481565b3480156102cc57600080fd5b5061026860015481565b3480156102e257600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b34801561031657600080fd5b5061032061271081565b60405163ffffffff909116815260200161024a565b34801561034157600080fd5b506102686105dc81565b34801561035757600080fd5b506103206188b881565b34801561036d57600080fd5b50610376610378565b005b7f00000000000000000000000000000000000000000000000000000000000000006000546103a69190610a5a565b421015610435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4665654469736275727365723a2044697362757273656d656e7420696e74657260448201527f76616c206e6f742072656163686564000000000000000000000000000000000060648201526084016101b0565b6104527342000000000000000000000000000000000000116106d4565b61046f7342000000000000000000000000000000000000196106d4565b61048c73420000000000000000000000000000000000001a6106d4565b4760008190036104c2576040517f8c887b1215d5e6b119c1c1008fe1d0919b4c438301d5a0357362a13fb56f6a4090600090a150565b426000908155600154612710906104dc906105dc90610a72565b6104e69190610aaf565b600060018190559091506127106104fe60fa85610a72565b6105089190610aaf565b9050600061051683836109fc565b90506105437f00000000000000000000000000000000000000000000000000000000000000005a83610a15565b6105cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4665654469736275727365723a204661696c656420746f2073656e642066756e60448201527f647320746f204f7074696d69736d00000000000000000000000000000000000060648201526084016101b0565b604080516020810182526000815290517fe11013dd0000000000000000000000000000000000000000000000000000000081527342000000000000000000000000000000000000109163e11013dd914791610652917f0000000000000000000000000000000000000000000000000000000000000000916188b891600401610aea565b6000604051808303818588803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b5050600054604080519182526020820186905281018890527fe155e054cfe69655d6d2f8bbfb856aa8cdf49ecbea6557901533364539caad94935060600191506106c69050565b60405180910390a150505050565b60018173ffffffffffffffffffffffffffffffffffffffff1663d0e12f906040518163ffffffff1660e01b8152600401602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190610bb7565b600181111561075657610756610b88565b146107e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4665654469736275727365723a204665655661756c74206d757374207769746860448201527f6472617720746f204c320000000000000000000000000000000000000000000060648201526084016101b0565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630d9019e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108699190610bd8565b73ffffffffffffffffffffffffffffffffffffffff161461090c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4665654469736275727365723a204665655661756c74206d757374207769746860448201527f6472617720746f2046656544697362757273657220636f6e747261637400000060648201526084016101b0565b8073ffffffffffffffffffffffffffffffffffffffff1663d3e5792b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190610c0e565b8173ffffffffffffffffffffffffffffffffffffffff1631106109f9578073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109e057600080fd5b505af11580156109f4573d6000803e3d6000fd5b505050505b50565b600081831015610a0c5781610a0e565b825b9392505050565b600080600080600080868989f195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610a6d57610a6d610a2b565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610aaa57610aaa610a2b565b500290565b600082610ae5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b73ffffffffffffffffffffffffffffffffffffffff841681526000602063ffffffff85168184015260606040840152835180606085015260005b81811015610b4057858101830151858201608001528201610b24565b81811115610b52576000608083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160800195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060208284031215610bc957600080fd5b815160028110610a0e57600080fd5b600060208284031215610bea57600080fd5b815173ffffffffffffffffffffffffffffffffffffffff81168114610a0e57600080fd5b600060208284031215610c2057600080fd5b505191905056fea164736f6c634300080f000a"


func init() {
	if err := json.Unmarshal([]byte(RevenueSharerStorageLayoutJSON), RevenueSharerStorageLayout); err != nil {
		panic(err)
	}

	layouts["RevenueSharer"] = RevenueSharerStorageLayout
	deployedBytecodes["RevenueSharer"] = RevenueSharerDeployedBin
	immutableReferences["RevenueSharer"] = true
}
