// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

import { L2StandardBridge } from "src/L2/L2StandardBridge.sol";
import { Predeploys } from "src/libraries/Predeploys.sol";

/// @title FeeVault
/// @notice The FeeVault contract contains the basic logic for the various different vault contracts
///         used to hold fee revenue generated by the L2 system.
abstract contract FeeVault {
    /// @notice Wallet that will receive the fees.
    address public immutable RECIPIENT;

    /// @notice Total amount of wei processed by the contract.
    uint256 public totalProcessed;

    /// @notice Emitted each time a withdrawal occurs. This event will be deprecated
    ///         in favor of the Withdrawal event containing the WithdrawalNetwork parameter.
    /// @param value Amount that was withdrawn (in wei).
    /// @param to    Address that the funds were sent to.
    /// @param from  Address that triggered the withdrawal.
    event Withdrawal(uint256 value, address to, address from);

    /// @param _recipient           Wallet that will receive the fees.
    constructor(address _recipient) {
        RECIPIENT = _recipient;
    }

    /// @notice Allow the contract to receive ETH.
    receive() external payable { }

    /// @notice Triggers a withdrawal of funds to the fee wallet on L1 or L2.
    function withdraw() external {
        uint256 value = address(this).balance;
        totalProcessed += value;
        emit Withdrawal(value, RECIPIENT, msg.sender);
        (bool success,) = RECIPIENT.call{ value: value }(hex"");
        require(success, "FeeVault: failed to send ETH to L2 fee recipient");
    }
}
